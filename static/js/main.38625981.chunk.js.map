{"version":3,"sources":["components/NumberMessages/index.js","components/Chat/index.js","App.js","serviceWorker.js","index.js"],"names":["StyledNumber","styled","p","Wrapper","div","NumberMessages","number","StyledButton","props","isActive","StyledPhoto","StyledName","StyledMessage","Chat","name","photo","lastChat","unreadMessage","onClick","src","split","reduce","response","word","slice","StyledHeader","LoadingSection","App","useState","rooms","setRooms","unread","setUnread","useEffect","fetchData","a","fetch","data","json","map","e","id","unread_message","display_name","last_chat","sum","curr","length","key","newRooms","i","chatClicked","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.38625981.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledNumber = styled.p`\n  display: block;\n  border-radius: 50%;\n  margin: 0 auto;\n  padding: 5px;\n  border: none;\n  background: #FDC7C2;\n  color: #A8342F;\n`;\n\nconst Wrapper = styled.div`\n  margin: auto;\n`;\n\nexport default function NumberMessages({number}) {\n  return (\n    <Wrapper>\n      {number > 0 && <StyledNumber>{number}</StyledNumber>}\n    </Wrapper>\n  );\n}","import React from 'react';\nimport styled from 'styled-components';\nimport NumberMessages from '../NumberMessages';\n\nconst StyledButton = styled.div`\n  position: relative;\n  display: flex;\n  grid-template-columns: repeat(3, 1fr);\n  background: ${props => props.isActive ? \"#e3e3e3\" : \"white\"};\n  border: 1px solid black;\n  padding: 10px;\n  cursor: pointer;\n`;\n\nconst StyledPhoto = styled.div`\n  display: flex;\n  justify-content: center;\n  border-radius: 50%;\n  border: 1px solid black;\n  height: auto;\n  width: 45px;\n  align-items: center;\n  font-size: 20px;\n  img {\n    width: 100%;\n    height: 100%;\n  }\n`;\n\nconst Wrapper = styled.div`\n  width: 70%;\n  padding: 0 10px;\n`;\n\nconst StyledName = styled.p`\n  font-size: 20px;\n  color: black;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  margin-top: 0;\n  margin-bottom: 5px;\n  white-space: nowrap;\n`;\n\nconst StyledMessage = styled.p`\n  font-size: 12px;\n  height: 14px;\n  margin-top: 0;\n  margin-bottom: 0;\n  color: grey;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`;\n\nexport default function Chat({name, photo, lastChat, unreadMessage, onClick, isActive}) {\n\n  return (\n    <StyledButton onClick={()=>onClick()} isActive={isActive}>\n      <StyledPhoto>\n        {photo ? <img src={photo}/> : \n        name.split(/\\s/).reduce((response,word)=> response+=word.slice(0,1),'')}\n      </StyledPhoto>\n      <Wrapper>\n        <StyledName>{name}</StyledName>\n        <StyledMessage>{lastChat}</StyledMessage>\n      </Wrapper>\n      <NumberMessages number={unreadMessage} />\n    </StyledButton>\n  );\n}","import React, { useState, useEffect } from 'react';\nimport Chat from './components/Chat';\nimport styled from 'styled-components';\nimport NumberMessages from './components/NumberMessages';\n\nconst StyledHeader = styled.div`\n  display: flex;\n  width: fit-content;\n  h1 {\n    padding: 0 10px;\n  }\n`;\n\nconst Wrapper = styled.div`\n  width: 360px;\n  height: 640px;\n  margin: auto;\n  border: 1px solid black;\n  button{\n    position: absolute;\n    bottom: 0;\n  }\n`;\n\nconst LoadingSection = styled.div`\n  margin: auto;\n  width: fit-content;\n`;\n\nfunction App() {\n  const [rooms, setRooms] = useState([]);\n  const [unread, setUnread] = useState(0);\n\n  useEffect(() => {\n    fetchData();\n  },[]);\n\n  const fetchData = async () => {\n    let data = await fetch(`https://www.mocky.io/v2/5e675f3b3100007300230876`);\n    data = await data.json();\n    data = data.rooms.map(e=>{\n      return {id: e.id, unreadMessage: e.unread_message, name: e.display_name, lastChat: e.last_chat, isActive: false}\n    });\n    const unreadMessage = data.reduce((sum, curr) => sum+curr.unreadMessage, 0);\n    setRooms(data);\n    setUnread(unreadMessage);\n  }\n\n  const chatClicked = (e) => {\n    let newRooms = rooms.map(i => {\n      if (i.id === e) {\n        return {\n          ...i,\n          unreadMessage: 0,\n          isActive: true\n        }\n      }\n      return {...i, isActive: false}\n    });\n    const unreadMessage = newRooms.reduce((sum, curr) => sum+curr.unreadMessage, 0);\n    setRooms(newRooms);\n    setUnread(unreadMessage);\n  }\n\n  return (\n    <Wrapper>\n      <StyledHeader>\n        <h1>Chats</h1>\n        <NumberMessages number={unread} />\n      </StyledHeader>\n      {rooms.length === 0 &&  <LoadingSection>Loading...</LoadingSection>}\n      {rooms.map(e => {\n        return <Chat \n          key={e.id} \n          name={e.name} \n          lastChat={e.lastChat} \n          unreadMessage={e.unreadMessage} \n          onClick={()=>chatClicked(e.id)}\n          isActive={e.isActive}/>\n      })}\n      <button onClick={()=>fetchData()}>Refresh</button>\n    </Wrapper>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}